generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  imageUrl String?

  isVerified         Boolean @default(false)
  verificationToken  String?
  resetPasswordToken String?

  verificationTokenExpiry  DateTime?
  resetPasswordTokenExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks         Task[]
  projects      Project[]
  memberships   ProjectMembership[]


  taskAssignedToMe TaskAssignee[] @relation("AssigneeUser") // tasks I received
  taskAssignedByMe  TaskAssignee[] @relation("AssignerUser")
}

model Project {
  id          String   @id @default(uuid())
  title        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isRoot Boolean @default(false)

  // Foreign keys
  ownerId String

  // Self-relation for nested projects
  parentId    String?
  parent      Project?  @relation("SubProjects", fields: [parentId], references: [id],onDelete: Cascade)
  subProjects Project[] @relation("SubProjects")

  // Relations
  owner       User                @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  memberships ProjectMembership[]
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime?

  //  Foreign keys
  userId    String
  projectId String

  // Relations
  creator      User         @relation(fields: [userId], references: [id])
  project   Project        @relation(fields: [projectId], references: [id],onDelete: Cascade)
  assignees TaskAssignee[]

  @@index([userId]) // Index for faster lookups by user
  @@index([projectId]) // Index for faster lookups by project
}

model ProjectMembership {
  id        String @id @default(uuid())
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
}

model TaskAssignee {
  id          String   @id @default(uuid())
  assigneeId      String   // Who is being assigned
  taskId      String   // The task assigned
  assignerId  String   // Who assigned the task (userId of assigner)
  assignedAt  DateTime @default(now())

  user        User     @relation("AssigneeUser", fields: [assigneeId], references: [id])
  task        Task     @relation(fields: [taskId], references: [id],onDelete: Cascade)
  assigner    User     @relation("AssignerUser", fields: [assignerId], references: [id])

  @@unique([assigneeId, taskId])
}

